/**
 * Module 1: Introduction to C Programming
 * ---------------------------------------
 * - stdio: Standard input and output library
 * - Functions: Two types - 1. User-defined 2. Built-in functions
 * - Every C program starts execution from the main function.
 */

#include <stdio.h>  // Include the standard input-output library

int main() {
    printf("Hello, world\n");  // Print "Hello, world" followed by a newline
    return 0;  // Return 0 to indicate successful execution
}

/**
 * Special Characters (Escape Sequences):
 * - \n: New line
 * - \t: Tab (equivalent to 4 spaces)
 * - \": Double quote
 * - \%: Percent sign (escape character for %)
 */

/**
 * Data Types:
 * 1. int: Integer type data, e.g., -100, 60, 80, 0
 * 2. float: Floating-point type data, e.g., -2.50, 5.25
 * 3. char: Character type data, e.g., 'A', 'b', 'c', '#', '@'
 * 4. bool: Boolean type, representing true or false
 */

/**
 * Variables:
 * - Variables must be declared before use to allocate memory.
 * - Example of variable declaration and initialization:
 *   int Number;  // Variable declaration
 *   Number = 100;  // Variable assignment
 *   int Number = 100;  // (initialization) Variable declaration and initialization
 */

--------------------------------------------------------------------------------------------

/**
 * Format Specifiers in C
 * -----------------------
 * Format specifiers are used in C for reading and writing data of different types.
 * They help specify the type of data being processed.
 */

#include <stdio.h>  // Include the standard input-output library

int main() {
    int number1 = 100, number2 = 200;

    // The %d format specifier is used for integers
    printf("The value of the numbers is: %d  %d", number2, number1);

    float number3 = 5.525;
    printf("\nThe value of the number is: %0.3f", number3);

    // This char contains 1 character. Otherwise, it will produce an error.
    char ami = 'A';
    printf("\nThe value of the Char is: %c", ami);

    return 0;
}

/**
 * Format Specifiers:
 * - %d: Used for integers (e.g., 42)
 * - %f: Used for floating-point numbers (e.g., 3.14)
 * - %c: Used for characters (e.g., 'A')
 * - %s: Used for strings (e.g., "Hello")
 * - %p: Used for pointers (e.g., memory addresses)
 * - %x: Used for hexadecimal numbers (e.g., 0x1A)
 */

/**
 * Note:
 * - The & operator is used with scanf to get the memory address of the variable.
 * - Different format specifiers are used with different data types.
 */

